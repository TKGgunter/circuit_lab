//! This module contains a wide variety of helper functions and structures that have 
//! no consistent theme.
//!
//!

use std::time::{Instant, Duration};


/// StopWatch is an Instant helper function used for timing.
/// 
/// ## Example
/// ```
/// let sw = StopWatch::new();
///
/// for i in 0..50{
///     sw.reset_lap_timer();
///
///     // Do some work. 
///
///     let lap_time = sw.lap_time();
/// }
///
/// let time_since_initial = sw.get_time();
/// ```
pub struct StopWatch{
    global_timer: Instant,
    lap_timer: Option<Instant>,
}

impl StopWatch{
    pub fn new()->StopWatch{
        return StopWatch{ global_timer: Instant::now(), lap_timer: None};
    }
    pub fn get_time(&self)->Duration{
        return self.global_timer.elapsed();
    }
    pub fn lap_time(&self)->Duration{
        match self.lap_timer{
            Some(ref lap_timer)=>{
                return lap_timer.elapsed();
            },
            _=>{
                return self.get_time();
            }
        }
    }
    pub fn reset_lap_timer(&mut self){
        self.lap_timer = Some(Instant::now());
    }
    pub fn reset(&mut self){
        self.global_timer = Instant::now();
        self.reset_lap_timer();
    }
}

/// Returns true if (x, y) are in the given rectangle. 
pub fn in_rect(x: i32, y: i32, rect: [i32;4])->bool{
    let mut rt = true;
    if x < rect[0]{
        rt = false;
    }
    if y < rect[1]{
        rt = false;
    }
    if x > rect[0] + rect[2]{
        rt = false;
    }
    if y > rect[1] + rect[3]{
        rt = false;
    }
    return rt;
}

/// Returns the over lapping area of the two given rectangles.
pub fn overlap_rect_area(rect1: [i32;4], rect2: [i32;4])->i32{
    let ol_x = i32::max(0, i32::min(rect1[0]+rect1[2], rect2[0]+rect2[2]) - i32::max(rect1[0], rect2[0]));
    let ol_y = i32::max(0, i32::min(rect1[1]+rect1[3], rect2[1]+rect2[3]) - i32::max(rect1[1], rect2[1]));

    return ol_x * ol_y;
}

#[test]
fn rect_overlap_test(){
    let one =  overlap_rect_area(
        [0, 0, 50, 50],
        [15, 15, 25, 25],
        );
    assert_eq!(one, 25*25);
    let two =  overlap_rect_area(
        [0, 0, 25, 25],
        [-15, -15, 50, 50],
        );
    assert_eq!(two, 25*25);
    let three =  overlap_rect_area(
        [0, 0, 50, 50],
        [25, 25, 50, 50],
        );
    assert_eq!(three, 25*25);
    let four =  overlap_rect_area(
        [25, 25, 50, 50],
        [0, 0, 50, 50],
        );
    assert_eq!(four, 25*25);

}


static mut RANDOM_NUMBER_INDEX: usize =  0;

/// Seeds the initial index when misc get_rand functions.
pub fn set_seed( seed: usize){unsafe{
    RANDOM_NUMBER_INDEX = seed;
}}

/// Returns a random usize from `RANDOM_NUMBERS`.
pub fn get_random()->usize{unsafe{
    let rt = RANDOM_NUMBERS[RANDOM_NUMBER_INDEX % RANDOM_NUMBERS.len()];
    RANDOM_NUMBER_INDEX += 1;

    return rt; 
}}

/// Returns a random f32  from `RANDOM_NUMBERS`, where the bounds are given by 
/// (plus_and_minus, -1*plus_and_minus).
pub fn get_randf32_pm(plus_and_minus: f32)->f32{

    let rt = get_randf32(-1f32*plus_and_minus, plus_and_minus); 
    return rt;
}

/// Returns a random f32 from `RANDOM_NUMBERS`. where the bounds are given by min, and max.
pub fn get_randf32(min: f32, max: f32)->f32{
    let mut rt = get_random() as f32 / 99999.0;
    let rt = rt * (max - min) + min;

    return rt; 
}

/// Returns a random i32 from `RANDOM_NUMBERS`. where the bounds are given by min, and max.
pub fn get_randi32(min: i32, max: i32)->i32{
    let mut rt = get_random() as f32 / 99999.0;
    let rt = (rt * (max - min) as f32) as i32 + min;

    return rt; 
}

/// This is an array of random numbers generated by NIST, [link](https://www.nist.gov/system/files/documents/2017/04/28/AppenB-HB133-05-Z.pdf).
//https://www.nist.gov/system/files/documents/2017/04/28/AppenB-HB133-05-Z.pdf
const RANDOM_NUMBERS: [usize; 500] = [
11164, 36318, 75061, 37674, 26320, 75100, 10431, 20418, 19228, 91792 ,
21215, 91791, 76831, 58678, 87054, 31687, 93205, 43685, 19732, 08468 ,
10438, 44482, 66558, 37649, 08882, 90870, 12462, 41810, 01806, 02977 ,
36792, 26236, 33266, 66583, 60881, 97395, 20461, 36742, 02852, 50564 ,
73944, 04773, 12032, 51414, 82384, 38370, 00249, 80709, 72605, 67497 ,
49563, 12872, 14063, 93104, 78483, 72717, 68714, 18048, 25005, 04151 ,
64208, 48237, 41701, 73117, 33242, 42314, 83049, 21933, 92813, 04763 ,
51486, 72875, 38605, 29341, 80749, 80151, 33835, 52602, 79147, 08868 ,
99756, 26360, 64516, 17971, 48478, 09610, 04638, 17141, 09227, 10606 ,
71325, 55217, 13015, 72907, 00431, 45117, 33827, 92873, 02953, 85474 ,
65285, 97198, 12138, 53010, 94601, 15838, 16805, 61004, 43516, 17020 ,
17264, 57327, 38224, 29301, 31381, 38109, 34976, 65692, 98566, 29550 ,
95639, 99754, 31199, 92558, 68368, 04985, 51092, 37780, 40261, 14479 ,
61555, 76404, 86210, 11808, 12841, 45147, 97438, 60022, 12645, 62000 ,
78137, 98768, 04689, 87130, 79225, 08153, 84967, 64539, 79493, 74917 ,
62490, 99215, 84987, 28759, 19177, 14733, 24550, 28067, 68894, 38490 ,
24216, 63444, 21283, 07044, 92729, 37284, 13211, 37485, 10415, 36457 ,
16975, 95428, 33226, 55903, 31605, 43817, 22250, 03918, 46999, 98501 ,
59138, 39542, 71168, 57609, 91510, 77904, 74244, 50940, 31553, 62562 ,
29478, 59652, 50414, 31966, 87912, 87154, 12944, 49862, 96566, 48825 ,
96155, 95009, 27429, 72918, 08457, 78134, 48407, 26061, 58754, 05326 ,
29621, 66583, 62966, 12468, 20245, 14015, 04014, 35713, 03980, 03024 ,
12639, 75291, 71020, 17265, 41598, 64074, 64629, 63293, 53307, 48766 ,
14544, 37134, 54714, 02401, 63228, 26831, 19386, 15457, 17999, 18306 ,
83403, 88827, 09834, 11333, 68431, 31706, 26652, 04711, 34593, 22561 ,
67642, 05204, 30697, 44806, 96989, 68403, 85621, 45556, 35434, 09532 ,
64041, 99011, 14610, 40273, 09482, 62864, 01573, 82274, 81446, 32477 ,
17048, 94523, 97444, 59904, 16936, 39384, 97551, 09620, 63932, 03091 ,
93039, 89416, 52795, 10631, 09728, 68202, 20963, 02477, 55494, 39563 ,
82244, 34392, 96607, 17220, 51984, 10753, 76272, 50985, 97593, 34320 ,
96990, 55244, 70693, 25255, 40029, 23289, 48819, 07159, 60172, 81697 ,
09119, 74803, 97303, 88701, 51380, 73143, 98251, 78635, 27556, 20712 ,
57666, 41204, 47589, 78364, 38266, 94393, 70713, 53388, 79865, 92069 ,
46492, 61594, 26729, 58272, 81754, 14648, 77210, 12923, 53712, 87771 ,
08433, 19172, 08320, 20839, 13715, 10597, 17234, 39355, 74816, 03363 ,
10011, 75004, 86054, 41190, 10061, 19660, 03500, 68412, 57812, 57929 ,
92420, 65431, 16530, 05547, 10683, 88102, 30176, 84750, 10115, 69220 ,
35542, 55865, 07304, 47010, 43233, 57022, 52161, 82976, 47981, 46588 ,
86595, 26247, 18552, 29491, 33712, 32285, 64844, 69395, 41387, 87195 ,
72115, 34985, 58036, 99137, 47482, 06204, 24138, 24272, 16196, 04393 ,
07428, 58863, 96023, 88936, 51343, 70958, 96768, 74317, 27176, 29600 ,
35379, 27922, 28906, 55013, 26937, 48174, 04197, 36074, 65315, 12537 ,
10982, 22807, 10920, 26299, 23593, 64629, 57801, 10437, 43965, 15344 ,
90127, 33341, 77806, 12446, 15444, 49244, 47277, 11346, 15884, 28131 ,
63002, 12990, 23510, 68774, 48983, 20481, 59815, 67248, 17076, 78910 ,
40779, 86382, 48454, 65269, 91239, 45989, 45389, 54847, 77919, 41105 ,
43216, 12608, 18167, 84631, 94058, 82458, 15139, 76856, 86019, 47928 ,
96167, 64375, 74108, 93643, 09204, 98855, 59051, 56492, 11933, 64958 ,
70975, 62693, 35684, 72607, 23026, 37004, 32989, 24843, 01128, 74658 ,
85812, 61875, 23570, 75754, 29090, 40264, 80399, 47254, 40135, 69916 ];


